# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## Build generated
build/
DerivedData/

## Various settings
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata/

## Other
*.moved-aside
*.xccheckout
*.xcscmblueprint

## Obj-C/Swift specific
*.hmap
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build

# fastlane
#
# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
# screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/#source-control

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/	func copyFile(fromPathString:String, toPathString:String) {
	
		let myManager = FileManager.default
		let fromPath : URL = URL(fileURLWithPath: fromPathString)
		var toPath = toPathString + fromPath.lastPathComponent
		let filename = (URL(fileURLWithPath: toPath)).lastPathComponent
		let fileExt  = (URL(fileURLWithPath: toPath)).pathExtension
		var fileNameWithoSuffix : String!
		var newFileName : String!
		var counter = 0

		
		if filename.hasSuffix(fileExt) {
			fileNameWithoSuffix = String(filename.prefix(filename.count - (fileExt.count+1)))
		}
	
		while myManager.fileExists(atPath: toPath) {
			counter += 1
			newFileName =  "\(fileNameWithoSuffix!)_\(counter).\(fileExt)"
			let newURL = URL(fileURLWithPath:toPathString).appendingPathComponent(newFileName).path
			toPath = newURL
		}
	
		try! myManager.copyItem(atPath: fromPathString, toPath: toPath)
   
	}
